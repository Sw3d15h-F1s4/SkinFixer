name: Release CI

on:
  push:
    tags:
      - '**'

jobs:
  build-linux-x86_64-xenial:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # Docker
    - name: Install dependencies for Docker
      run: sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release make
    - name: Docker GPG Key
      run: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    - name: Docker APT repository
      run: echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    - name: Install Docker
      run: sudo apt-get update -y && sudo apt-get install -y docker-ce docker-ce-cli containerd.io

    # Build
    - name: Build library
      run: make lib/target/x86_64-unknown-linux-gnu/release/libskinfixer.so

    #Upload file
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: linux-x86_64-xenial.so
        path: lib/target/x86_64-unknown-linux-gnu/release/libskinfixer.so
        retention-days: 1

  build-linux-x86_64-focal:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # Dependencies
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y make gcc libssl-dev
    - name: Install Rust
      run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - name: Add Rust binaries to path
      run: export PATH="$HOME/.cargo/bin:$PATH"
    - name: Add target
      run: rustup target add x86_64-unknown-linux-gnu

    # Build
    - name: Build library
      run: make lib/target/x86_64-unknown-linux-gnu/release/libskinfixer.so

    #Upload file
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: linux-x86_64-focal.so
        path: lib/target/x86_64-unknown-linux-gnu/release/libskinfixer.so
        retention-days: 1

  build-linux-aarch64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
  
    # Docker
    - name: Install dependencies for Docker
      run: sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release make
    - name: Docker GPG Key
      run: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    - name: Docker APT repository
      run: echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    - name: Install Docker
      run: sudo apt-get update -y && sudo apt-get install -y docker-ce docker-ce-cli containerd.io

    # Build
    - name: Build library
      run: make lib/target/aarch64-unknown-linux-gnu/release/libskinfixer.so

    # Upload file
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: linux-aarch64.so
        path: lib/target/aarch64-unknown-linux-gnu/release/libskinfixer.so
        retention-days: 1

  build-linux-armhf:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
  
    # Docker
    - name: Install dependencies for Docker
      run: sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release make
    - name: Docker GPG Key
      run: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    - name: Docker APT repository
      run: echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    - name: Install Docker
      run: sudo apt-get update -y && sudo apt-get install -y docker-ce docker-ce-cli containerd.io

    # Build
    - name: Build library
      run: make lib/target/arm-unknown-linux-gnueabihf/release/libskinfixer.so

    # Upload file
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: linux-armhf.so
        path: lib/target/arm-unknown-linux-gnueabihf/release/libskinfixer.so
        retention-days: 1

  build-windows-x86_64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # Dependencies
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y make gcc libssl-dev gcc-mingw-w64-x86-64
    - name: Install Rust
      run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - name: Add Rust binaries to path
      run: export PATH="$HOME/.cargo/bin:$PATH"
    - name: Add windows target
      run: rustup target add x86_64-pc-windows-gnu
      
    # Build
    - name: Build library
      run: make lib/target/x86_64-pc-windows-gnu/release/libskinfixer.dll

    # Upload file
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: windows-x86_64.dll
        path: lib/target/x86_64-pc-windows-gnu/release/libskinfixer.dll
        retention-days: 1

  build-apple-darwin-x86_64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # Docker
    - name: Install dependencies for Docker
      run: sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release make
    - name: Docker GPG Key
      run: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    - name: Docker APT repository
      run: echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    - name: Install Docker
      run: sudo apt-get update -y && sudo apt-get install -y docker-ce docker-ce-cli containerd.io

    # Build
    - name: Build library
      run: make lib/target/x86_64-apple-darwin/release/libskinfixer.dylib

    #Upload file
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: darwin-x86_64.dylib
        path: lib/target/x86_64-apple-darwin/release/libskinfixer.dylib
        retention-days: 1

  build-jar:
    runs-on: ubuntu-latest
    needs:
    - build-linux-x86_64-xenial
    - build-linux-x86_64-focal
    - build-linux-aarch64
    - build-linux-armhf
    - build-windows-x86_64
    - build-apple-darwin-x86_64
    steps:
    - uses: actions/checkout@v2

    # Dependencies
    - name: Set up Java 16
      uses: actions/setup-java@v1
      with:
        java-version: 1.16
    - name: Make
      run: sudo apt-get install -y make
    
    #Download artifacts
    - name: Download Linux x86_64 Xenial artifact
      uses: actions/download-artifact@v2
      with:
        name: linux-x86_64-xenial.so
        path: lib/target/x86_64-unknown-linux/release/
    - name: Rename artifact
      run: mv lib/target/x86_64-unknown-linux/release/libskinfixer.so lib/target/x86_64-unknown-linux/release/libskinfixer-xenial.so

    - name: Download Linux x86_64 Focal artifact
      uses: actions/download-artifact@v2
      with:
        name: linux-x86_64-focal.so
        path: lib/target/x86_64-unknown-linux/release/
    #- name: Rename artifact
    #  run: mv lib/target/x86_64-unknown-linux/release/linux-x86_64-focal.so lib/target/x86_64-unknown-linux/release/libskinfixer.so

    - name: Download Linux aarch64 artifact
      uses: actions/download-artifact@v2
      with:
        name: linux-aarch64.so
        path: lib/target/aarch64-unknown-linux/release/
    #- name: Rename artifact
    #  run: mv lib/target/aarch64-unknown-linux/release/linux-aarch64.so lib/target/aarch64-unknown-linux/release/libskinfixer.so

    - name: Download Linux armhf artifact
      uses: actions/download-artifact@v2
      with:
        name: linux-armhf.so
        path: lib/target/arm-unknown-linux-gnueabihf/release/
    #- name: Rename artifact
    #  run: mv lib/target/arm-unknown-linux-gnueabihf/release/linux-x86_64.so lib/target/arm-unknown-linux-gnueabihf/release/libskinfixer.so

    - name: Download Windows x86_64 artifact
      uses: actions/download-artifact@v2
      with:
        name: windows-x86_64.dll
        path: lib/target/x86_64-pc-windows-gnu/release/
    #- name: Rename artifact
    #  run: mv lib/target/x86_64-pc-windows-gnu/release/windows-x86_64.dll lib/target/x86_64-pc-windows-gnu/release/libskinfixer.dll

    - name: Download Apple Darwin x86_64 artifact
      uses: actions/download-artifact@v2
      with:
        name: darwin-x86_64.dylib
        path: lib/target/x86_64-apple-darwin/release/
    #- name: Rename artifact
    #  run: mv lib/target/x86_64-apple-darwin/release/darwin-x86_64.dylib lib/target/x86_64-apple-darwin/release/libskinfixer.dylib

    # Build JAR
    - name: Gradlew permissions
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew releasejar
    
    # Create release
    #Extract version number
    - name: Extract version number
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    #Extract repository name
    - name: Extract repository name
      run: echo "REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")" >> $GITHUB_ENV

    #Create a release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    #Attach compiled JAR to Releases
    - name: Attach JAR to Release
      id: upload_release_asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
         upload_url: ${{ steps.create_release.outputs.upload_url }}
         asset_path: releases/SkinFixer-${{ env.RELEASE_VERSION }}-RELEASE.jar
         asset_name: ${{ env.REPOSITORY_NAME }}-${{ env.RELEASE_VERSION }}-RELEASE.jar
         asset_content_type: application/java-archive