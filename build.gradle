import org.apache.tools.ant.filters.ReplaceTokens
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id 'eclipse'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    
}

allprojects {
	version = pluginVersion
	group = pluginGroup	

	sourceCompatibility = 1.16
	targetCompatibility = 1.16
	

	repositories {
		mavenCentral()
  	  	maven{ url "https://hub.spigotmc.org/nexus/content/repositories/snapshots" }
   	 	maven{ url "https://oss.sonatype.org/content/repositories/snapshots" }
   	 	maven{ url 'https://jitpack.io' }
        maven {
            name 'm2-dv8tion'
            url 'https://m2.dv8tion.net/releases'
        }
    }
    
	processResources {
    	from(sourceSets.main.resources.srcDirs) {
        	filter ReplaceTokens, tokens: [version: version]
			filter ReplaceTokens, tokens: [name: pluginName]
			filter ReplaceTokens, tokens: [groupId: pluginGroup]
			filter ReplaceTokens, tokens: [author: pluginAuthor]
			filter ReplaceTokens, tokens: [apiVersion: pluginApiVersion]
		}
    }
}

dependencies {
    implementation 'com.github.TheDutchMC:HttpLib:1.1'
	compileOnly 'org.spigotmc:spigot-api:1.17-R0.1-SNAPSHOT'
	implementation 'org.slf4j:slf4j-log4j12:1.7.29'
	implementation('net.dv8tion:JDA:4.2.1_266') {
		exclude module: 'opus-java' 
	}
	implementation 'dev.array21:classvalidator:1.0.0'
	implementation 'dev.array21:pluginstatlib:1.0.5'
}

shadowJar() {
 	classifier = ''
	relocate 'net.dv8tion.jda', 'nl.thedutchmc.skinfixer.libs.net.dv8tion.jda'
	relocate 'com.google.code.gson', 'nl.thedutchmc.skinfixer.libs.com.google.code.gson'
	relocate 'nl.thedutchmc.httplib', 'nl.thedutchmc.skinfixer.libs.nl.thedutchmc.httplib'
	relocate 'org.slf4j', 'nl.thedutchmc.skinfixer.libs.org.slf4j'
	relocate 'dev.array21', 'nl.thedutchmc.skinfixer.libs.dev.array21'
}


task testJar(type: ShadowJar) {
	relocate 'net.dv8tion.jda', 'nl.thedutchmc.libs.jda'
	description 'Build a test Jar'
	archiveClassifier = 'DEV'
	from sourceSets.main.output
	configurations = [project.configurations.runtimeClasspath]
	destinationDirectory = file("$rootDir/server/plugins")
}

processResources  {
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

task releaseJar(type: ShadowJar) {
	relocate 'net.dv8tion.jda', 'nl.thedutchmc.libs.jda'
	description 'Build a release Jar'
	archiveClassifier = 'RELEASE'
	from sourceSets.main.output
	configurations = [project.configurations.runtimeClasspath]
	destinationDirectory = file("$rootDir/releases")
}

task ghActions(type: ShadowJar) {
	relocate 'net.dv8tion.jda', 'nl.thedutchmc.libs.jda'
	description 'GitHub Actions task. Not used for regular development'
	version = ''
	archiveClassifier = ''
	archiveBaseName = 'output'
	from sourceSets.main.output
	configurations = [project.configurations.runtimeClasspath]
	destinationDirectory = file("$rootDir/actions")
}